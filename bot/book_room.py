from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta
import constants as C
from booking_storage import mark_slot_as_booked, is_slot_available

# Step 1: Day choice
async def book_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ", callback_data="book:today"),
         InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="book:tomorrow")],
        [InlineKeyboardButton("–Ü–Ω—à–∞ –¥–∞—Ç–∞", callback_data="book:other")]
    ])
    await update.message.reply_text("–î–æ–±—Ä–µ. –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–∏—à–∞.\n–û–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=keyboard)

# Step 2: Handle day selection
async def handle_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "book:today":
        date = datetime.now().strftime("%m-%d")
        await show_time_slots(query, date)
    elif query.data == "book:tomorrow":
        date = (datetime.now() + timedelta(days=1)).strftime("%m-%d")
        await show_time_slots(query, date)
    elif query.data == "book:other":
        buttons = []
        for i in range(6):  # –∑ —Å—å–æ–≥–æ–¥–Ω—ñ
            day = datetime.now() + timedelta(days=i)
            day_num = day.day
            month_name = C.UKR_MONTHS[day.month]
            label = f"{day_num} {month_name}"
            callback = f"bookdate:{day.strftime('%m-%d')}"
            buttons.append([InlineKeyboardButton(label, callback_data=callback)])
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))
    elif query.data.startswith("bookdate:"):
        date = query.data.split(":")[1]
        await show_time_slots(query, date)
    elif query.data.startswith("booktime:"):
        parts = query.data.split(":", 2)
        if len(parts) == 3:
            _, datetime_str = parts[0], parts[1] + ":" + parts[2]  # "05-29T09:00"
            if "T" in datetime_str:
                date, time = datetime_str.split("T")

                user_id = query.from_user.id
                username = query.from_user.username

                mark_slot_as_booked(date, time, user_id, username)

                await query.edit_message_text(
                    f"–ì–æ—Ç–æ–≤–æ.\n–¢–∏—à–∞ —Ç–µ–±–µ —á–µ–∫–∞—Ç–∏–º–µ {date} –æ {time}.\n"
                    "–Ø–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç—å—Å—è ‚Äî —Å–∫–∞–∂–∏ –º–µ–Ω—ñ. –ê–ª–µ –∫—Ä–∞—â–µ –Ω–µ –º–µ—Ç—É—à–∏—Ç–∏—Å—è."
                )
    else:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data.")

# Step 3: Show time slots
def chunk_buttons(buttons, n):
    return [buttons[i:i + n] for i in range(0, len(buttons), n)]

async def show_time_slots(query, date_str):
    times = ["09:00", "10:00", "11:00", "12:00", "13:00", "14:00",
             "15:00", "16:00", "17:00", "18:00", "19:00", "20:00"]

    now = datetime.now()
    today_str = now.strftime("%m-%d")

    all_buttons = []

    for t in times:
        # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ª–æ—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π
        if not is_slot_available(date_str, t):
            continue

        # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å—å–æ–≥–æ–¥–Ω—ñ
        if date_str == today_str:
            month, day = map(int, date_str.split("-"))
            hour, minute = map(int, t.split(":"))
            slot_time = datetime(now.year, month, day, hour, minute)

            # —è–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤ –∞–±–æ –º–µ–Ω—à–µ –Ω—ñ–∂ —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É
            if slot_time <= now or slot_time - now < timedelta(hours=1):
                continue

        all_buttons.append(InlineKeyboardButton(t, callback_data=f"booktime:{date_str}T{t}"))

    if all_buttons:
        keyboard = chunk_buttons(all_buttons, 4)
        await query.edit_message_text(
            f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è {date_str}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_text(
            f"–ù–∞ {date_str} –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É ü™∑\n"
            "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É, –±—É–¥—å –ª–∞—Å–∫–∞."
        )